#!/bin/bash


# Set variables
targetDir=$(pwd)
jvalDir=$(readlink -f $(dirname $(readlink -f $0))/..)
[[ "$1" == "--dir" ]] && opt="dir" || opt="gitrepo"


# Function: gracefulExit
function gracefulExit() {
    printf "\n\n\e[39m"
    tput cnorm
}


# Function: execPlugins(pluginPath, targetType, targetPath)
function execPlugins() {
    progressBar="##################################################"
    progressBgr="--------------------------------------------------"
    el=$(tput el)

    for pluginEntry in $1/*; do
        if [[ -e "$pluginEntry" ]]; then
            ready=true
            unset jvalPluginValidateFile jvalPluginGetTargetFiles jvalPluginValidateFile

            . "$pluginEntry"

            if typeset -f jvalPluginGetDependencies >/dev/null; then
                for dependency in $(jvalPluginGetDependencies); do
                    if [[ $dependency == python:* ]]; then
                        out=$(python -c "import ${dependency:7}" 2>&1)
                        [[ $? != 0 ]] && ready=false
                    else
                        [[ -z $(which $dependency 2> /dev/null) ]] && ready=false
                    fi
                done
            fi

            if [[ $ready == true ]]; then
                if typeset -f jvalPluginGetTargetFiles >/dev/null && typeset -f jvalPluginValidateFile >/dev/null; then
                    files=$(jvalPluginGetTargetFiles "$2" "$3")

                    if [[ ! -z $files ]]; then
                        printf "\n\e[39mValidating files with plugin: $(basename "$pluginEntry")$el\n"
                        readarray -t files <<< "$(echo "$files" | sort)"
                        i=0; n=${#files[@]}

                        for entry in "${files[@]}"; do
                            progressPercentile=$(awk "BEGIN { print int($i / $n * 100) }")
                            progressChars=$(awk "BEGIN { print int($i / $n * 50) }")
                            printf "\e[39m  * $entry... $el\n$el\n\e[94m  $((++i))/$n [${progressBar:0:$progressChars}${progressBgr:0:$(expr 50 - $progressChars)}] $progressPercentile%% / $(basename "$pluginEntry")"

                            pluginOutput=$(jvalPluginValidateFile "$entry")

                            if [[ $? == 0 ]]; then
                                printf "\r\033[2A\e[39m  * $entry... \e[32mValid$el\n$el"
                            else
                                printf "\r$el\e[94m$(echo "$pluginOutput" | sed 's/^/  /')\e[39m\n\n\e[91m  Validation fail raised in plugin: $(basename "$pluginEntry")"
                                [[ $2 == "gitrepo" ]]; printf "\n\e[91m  Commit canceled! To bypass validations: git commit --no-verify ...\e[39m"
                                exit 1
                            fi
                        done
                    fi
                fi
            fi
        fi
    done
}


# Function: runLocalHook(targetPath)
function runLocalHook() {
    if [[ -e "$1/.git/hooks/pre-commit.jlocal" ]]; then
        printf "\nRunning local hook...\n\n"
        "$1/.git/hooks/pre-commit.jlocal"
        [[ $? == 0 ]] && { printf "\n"; exit 0; } || { printf "\n"; exit 1; }
    fi
}


# Hide cursor during execution
trap gracefulExit EXIT
tput civis


# Verify repo and show header
if [[ $opt == "gitrepo" ]]; then
    [[ ! -d ".git" ]] && { printf "Target directory is not a Git repo.\n\n"; exit 1; }
    printf "Jval running in Git repository: $(basename $targetDir)\n"
else
    printf "Jval running recursively in directory: $targetDir\n"
fi


# Execute validation plugins
execPlugins "$jvalDir/plugins/default" $opt "$targetDir"
execPlugins "$jvalDir/plugins/custom" $opt "$targetDir"


# Validation completed
printf "\n\e[32mValidation completed.$(tput el)"


# Run local hook
[[ $opt == "gitrepo" ]] && runLocalHook "$targetDir"


# Exit with status 0
exit 0
